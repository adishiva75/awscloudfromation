Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import datetime
          
          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')
              now = datetime.datetime.utcnow()
              response = ec2.describe_instances()
              for reservation in response['Reservations']:
                  for instance in reservation['Instances']:
                      launch_time = instance['LaunchTime']
                      running_time = now - launch_time
                      if running_time.days > 30:
                          instance_id = instance['InstanceId']
                          ec2.terminate_instances(InstanceIds=[instance_id])
        Runtime: python3.8
        Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'EC2TerminatePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:TerminateInstances'
                Resource: '*'

  CloudWatchEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'cron(0 0 * * ? *)'
      State: 'ENABLED'
      Targets:
        - Id: 'LambdaTarget'
          Arn: !GetAtt LambdaFunction.Arn
