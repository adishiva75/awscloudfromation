AWSTemplateFormatVersion: "2010-09-09"
Resources:
  MyLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:*
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:*
                Resource: '*'
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt MyLambdaRole.Arn
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3
          import datetime
          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')
              response = ec2.describe_instances()
              instances = []
              for reservation in response["Reservations"]:
                  for instance in reservation["Instances"]:
                      launch_time = instance["LaunchTime"]
                      diff = datetime.datetime.now(datetime.timezone.utc) - launch_time
                      if diff.days > 0:
                          instances.append(instance["InstanceId"])
                          print("Instance ID: ", instance["InstanceId"])
                          print("Launch Time: ", launch_time)
              print('List of instances launched more than 0 days ago: ' + str(instances))
      Tags:
        - Key: Name
          Value: MyLambdaFunction

  MyLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref MyLambdaFunction]]
      RetentionInDays: 30

  MyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: RunMyLambdaFunction
      Description: Schedule to run the Lambda function every day at 2PM UTC
      ScheduleExpression: 'cron(0 19 * * ? *)' 
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: RunMyLambdaFunction

Outputs:
  MyLambdaFunctionArn:
    Value: !GetAtt MyLambdaFunction.Arn
    Description: The ARN of the Lambda function.